<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Daker Pinheiro</title>
    <link>https://dakerfp.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>â’¸ 2017 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Thu, 07 Jul 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dakerfp.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Singletons using std::weak_ptr</title>
      <link>https://dakerfp.com/post/weak_ptr_singleton/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/weak_ptr_singleton/</guid>
      <description>A common issue is how a resource and initialize it only when needed. A common C++ pattern to solve this is using the Resource Acquisition Is Initialization aka RAII. That&amp;rsquo;s what smart pointers do when created and get out of scope. But what if these resources must be unique?
The first thing that comes in mind is a singleton, but the plain singleton pattern, which has a static method or function returning a raw pointer usually creates the resource only once.</description>
    </item>
    
    <item>
      <title>Improve your lazy debugging in C&#43;&#43;</title>
      <link>https://dakerfp.com/post/improve-your-lazy-debugging-in-c/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/improve-your-lazy-debugging-in-c/</guid>
      <description>Are you too lazy to learn your debugger? When debugging, I usually want to know if some code section is reached.
I can do this:
void foobar() { printf(&amp;quot;foobar()\n&amp;quot;); // ... do foobar }  But I should use cout instead printf in C++. printf is faster, but in this case it should be irrelevant. So I have:
void foobar() { std::cout &amp;lt;&amp;lt; &amp;quot;foobar()&amp;quot; &amp;lt;&amp;lt; std::endl; // ... do foobar }  I could also use GCC&amp;rsquo;s function name macro __PRETTY_FUNCTION__ and __LINE__ macro to identify the reached code section easier.</description>
    </item>
    
    <item>
      <title>How to set a X window visible or invisible using Xlib</title>
      <link>https://dakerfp.com/post/how-to-set-x-window-visible-or-invisible/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/how-to-set-x-window-visible-or-invisible/</guid>
      <description>bool m_visible; Display* m_display; Window m_window; void setVisible(bool visible) { if (visible == m_visible) return; if (visible) XMapWindow(m_display, m_window); else XUnmapWindow(m_display, m_window); m_visible = visible; }  </description>
    </item>
    
  </channel>
</rss>