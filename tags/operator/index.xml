<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operator on Daker Pinheiro</title>
    <link>https://dakerfp.com/tags/operator/</link>
    <description>Recent content in Operator on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>â’¸ 2017 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Tue, 07 Jan 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dakerfp.com/tags/operator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Regex like operators for DCG</title>
      <link>https://dakerfp.com/post/regex-like-operators-for-dcg/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/regex-like-operators-for-dcg/</guid>
      <description>Today I was trying to create a simple parser to count syllables in latin words with Prolog. I usually use DCGs in Prolog for parsing. Their semantic is very similar to BNF. I love DCGs, but sometimes the verbosity in some cases annoys me. Take the following example:
consonant --&amp;gt; &amp;quot;b&amp;quot;; &amp;quot;c&amp;quot;; &amp;quot;d&amp;quot;; &amp;quot;f&amp;quot;; &amp;quot;g&amp;quot;; &amp;quot;h&amp;quot;; &amp;quot;l&amp;quot;; &amp;quot;j&amp;quot;; &amp;quot;k&amp;quot;; &amp;quot;m&amp;quot;; &amp;quot;n&amp;quot;; &amp;quot;p&amp;quot;; &amp;quot;q&amp;quot;; &amp;quot;r&amp;quot;; &amp;quot;s&amp;quot;; &amp;quot;t&amp;quot;; &amp;quot;v&amp;quot;; &amp;quot;x&amp;quot;; &amp;quot;z&amp;quot;. consonants --&amp;gt; [].</description>
    </item>
    
    <item>
      <title>DiagnostiCar (2) - Knowledge Representation Language</title>
      <link>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</link>
      <pubDate>Sun, 11 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</guid>
      <description>I&amp;rsquo;m giving sequence to the last post about the DiagnostiCar expert system. Today I&amp;rsquo;m going to specify the predicates to represent some domain specific knowledge.
Prolog has a helpful and clean syntax, at least when you&amp;rsquo;re used to, and it&amp;rsquo;s easy to define new operators syntax in SWI. Such feature improves the readability of the knowledge base or other DSL you want to create.
To make an abductive reasoning we will need at least the logic operators &amp;lsquo;and&amp;rsquo;,&amp;lsquo;or&amp;rsquo; and &amp;lsquo;implies&amp;rsquo; to represent knowledge and chain it.</description>
    </item>
    
  </channel>
</rss>