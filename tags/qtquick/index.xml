<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qtquick on Daker Pinheiro</title>
    <link>https://dakerfp.com/tags/qtquick/</link>
    <description>Recent content in Qtquick on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>â’¸ 2017 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Mon, 14 May 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dakerfp.com/tags/qtquick/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QML Theming/Styling (Update)</title>
      <link>https://dakerfp.com/post/qml-themingstyling-update/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/qml-themingstyling-update/</guid>
      <description>This post is an update about the research project from my team, described a few weeks ago.
From the time we published the last post about QML Styling until now we have worked on this set of issues/features:
 Get feedback about research project Combo Box Component Combo Box Customizable Style Combo Box Plastique Style SubControl Styling Understand SceneGraph internals Understand other native platform internals  I will detail what was possible to make for each of these topics in sessions below.</description>
    </item>
    
    <item>
      <title>QtQuick - WSL II</title>
      <link>https://dakerfp.com/post/qtquick-wsl-ii/</link>
      <pubDate>Fri, 27 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/qtquick-wsl-ii/</guid>
      <description>QtQuick uses QML, a powerful tool for creating fluid interfaces in a clean, easy and fast way. It uses a declarative language (Javascript based) and it has a really good performance, which makes it suitable to make apps for any kind of platform. It&amp;rsquo;s also really easy to extend QML with Qt/C++, enbling developers to speedup the application logic or something else needed. Is also possible to use OpenGL to render QtQuick without any change in the code, sending the painting job to the video card.</description>
    </item>
    
    <item>
      <title>Plasma Components</title>
      <link>https://dakerfp.com/post/plasma-components/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/plasma-components/</guid>
      <description>Hi,
I will talk about my GSoC project (\m/), the plasma components. As you may know, QML is a declarative language to build rich interfaces introduced in Qt 4.7 by providing simple primitives. As it is a powerful way to develop interfaces and it&amp;rsquo;s the future of UI development for Qt was necessary to make the plasma support it.
Create interfaces in QML is really easy and fast but sometimes we need common widgets and may be boring to reimplement and replicate them in every application we create (e.</description>
    </item>
    
  </channel>
</rss>