<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Daker Pinheiro</title>
    <link>https://dakerfp.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Thu, 07 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dakerfp.github.io/tags/c&#43;&#43;/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Singletons using std::weak_ptr</title>
      <link>https://dakerfp.github.io/post/weak_ptr_singleton/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/weak_ptr_singleton/</guid>
      <description>&lt;p&gt;A common issue is how a resource and initialize it only when needed.
A common C++ pattern to solve this is using the Resource Acquisition Is Initialization aka RAII.
That&amp;rsquo;s what smart pointers do when created and get out of scope.
But what if these resources must be unique?&lt;/p&gt;

&lt;p&gt;The first thing that comes in mind is a singleton, but the plain singleton
pattern, which has a static method or function returning a raw pointer usually creates the resource only once.
It is hardly released, or must explicitly released. The solution is to use smart pointers somehow.&lt;/p&gt;

&lt;p&gt;The following code is the solution I came out with to solve it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;memory&amp;gt;

class Resource {
private:
    // A good API should forbid invalid usage.
    Resource() {
        // initialize
    }

public:
    ~Resource() {
        // release
    }

    static std::shared_ptr&amp;lt;Resource&amp;gt; instance() {
        static std::weak_ptr&amp;lt;Resource&amp;gt; _instance;
        if (auto ptr = _instance.lock()) { // .lock() returns a shared_ptr and increments the refcount
            return ptr;
        }
        // Does not support std::make_shared&amp;lt;Resource&amp;gt; because of
        // the Resource private constructor.
        auto ptr = std::shared_ptr&amp;lt;Resource&amp;gt;(new Resource());
        _instance = ptr;
        return ptr;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting aspect is the static weak_ptr which registers the resource,
but does not prevents its release, when all returned shared_ptr release the resource.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improve your lazy debugging in C&#43;&#43;</title>
      <link>https://dakerfp.github.io/post/improve-your-lazy-debugging-in-c/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/improve-your-lazy-debugging-in-c/</guid>
      <description>&lt;p&gt;Are you too lazy to learn your debugger? When debugging, I usually want
to know if some code section is reached.&lt;/p&gt;

&lt;p&gt;I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void foobar() {
    printf(&amp;quot;foobar()\n&amp;quot;);
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I should use &lt;a href=&#34;http://stackoverflow.com/questions/2872543/printf-vs-cout-in-c&#34;&gt;&lt;code&gt;cout&lt;/code&gt; instead &lt;code&gt;printf&lt;/code&gt; in C++&lt;/a&gt;.
&lt;a href=&#34;http://programming-designs.com/2009/02/c-speed-test-part-2-printf-vs-cout/&#34;&gt;&lt;code&gt;printf&lt;/code&gt; is faster&lt;/a&gt;,
but in this case it should be irrelevant. So I have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void foobar() {
    std::cout &amp;lt;&amp;lt; &amp;quot;foobar()&amp;quot; &amp;lt;&amp;lt; std::endl;
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html&#34;&gt;GCC&amp;rsquo;s function name macro &lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html&#34;&gt;&lt;code&gt;__LINE__&lt;/code&gt; macro&lt;/a&gt;
to identify the reached code section easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void foobar() {
    std::cout &amp;lt;&amp;lt;  __PRETTY_FUNCTION__ &amp;lt;&amp;lt; &amp;quot; at line &amp;quot; &amp;lt;&amp;lt;  __LINE__ &amp;lt;&amp;lt; std::endl;
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add that on a macro to reuse it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#if DEBUG
#include 
#define REACH std::cout &amp;lt;&amp;lt;  __PRETTY_FUNCTION__ &amp;lt;&amp;lt; &amp;quot; at line &amp;quot; &amp;lt;&amp;lt;  __LINE__ &amp;lt;&amp;lt; std::endl;
#endif

void foobar() {
    REACH
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And happy debugging!&lt;/p&gt;

&lt;p&gt;Not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to set a X window visible or invisible using Xlib</title>
      <link>https://dakerfp.github.io/post/how-to-set-x-window-visible-or-invisible/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/how-to-set-x-window-visible-or-invisible/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool m_visible;
Display* m_display;
Window m_window;

void setVisible(bool visible)
{
    if (visible == m_visible)
        return;

    if (visible)
        XMapWindow(m_display, m_window);
    else
        XUnmapWindow(m_display, m_window);

    m_visible = visible;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>