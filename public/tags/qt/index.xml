<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt on Daker Pinheiro</title>
    <link>https://dakerfp.github.io/tags/qt/</link>
    <description>Recent content in Qt on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Mon, 13 Aug 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dakerfp.github.io/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Qt &amp; KDE in FISL 13</title>
      <link>https://dakerfp.github.io/post/qt-kde-in-fisl-13/</link>
      <pubDate>Mon, 13 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qt-kde-in-fisl-13/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/fisl.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was a great to see again some friends from KDE Brazil and met some
new ones. The Konqui&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/kdenofisl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I also gave some talks and workshop about Qt, KDE and game development.&lt;/p&gt;

&lt;h2 id=&#34;workshop-developing-applications-for-multiple-devices-using-plasma-technologies&#34;&gt;Workshop: Developing applications for multiple devices using Plasma technologies&lt;/h2&gt;

&lt;p&gt;This workshop was idealized and given by &lt;a href=&#34;http://vizzion.org&#34;&gt;Sebas&lt;/a&gt;,
and I was there to help him. In the workshop, QML was introduced
together with KDE libs and what they can add to the applications.&lt;/p&gt;

&lt;p&gt;Was good to show the current state of the Plasmate and how easily is
creating and deploying a new Plasmoid. It was interesting to see how
people were amazed about how easy is to start hacking and deploying a
project.&lt;/p&gt;

&lt;h2 id=&#34;talk-games-with-qt&#34;&gt;Talk: Games with Qt&lt;/h2&gt;

&lt;p&gt;In this talk I gave an overview about what Qt is and which tool are
available for creating games with it.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/aqBOtKXwKCfdoC&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/dakerfp/jogos-em-qt&#34; title=&#34;Jogos em Qt&#34; target=&#34;_blank&#34;&gt;Jogos em Qt&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/dakerfp&#34; target=&#34;_blank&#34;&gt;Daker Fernandes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;workshop-games-with-qt&#34;&gt;Workshop: Games with Qt&lt;/h2&gt;

&lt;p&gt;On the third day I gave a 3 hours hands-on workshop about game
development using only QtQuick. During the workshop, I&amp;rsquo;ve presented
basic QtQuick and some basic game concepts such as the game loop,
collisions and physics. I also tried to apply to explain how these
concepts match with the QML development.&lt;/p&gt;

&lt;p&gt;I created a simple click game
&lt;a href=&#34;https://github.com/dakerfp/Monera-Game&#34;&gt;Monera&lt;/a&gt; as an example to the
attendees. The code was written step by step and used itself as example
and introduction to QtQuick. It was possible for everyone to write the
code on their own computers and test.&lt;/p&gt;

&lt;p&gt;In the end also gave them a overview about how to install the QML-Box2D
and how to use it&amp;rsquo;s API.&lt;/p&gt;

&lt;p&gt;The code used as case is available on GitHub:
&lt;a href=&#34;https://github.com/dakerfp/Monera-Game&#34;&gt;https://github.com/dakerfp/Monera-Game&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately I didn&amp;rsquo;t used git to keep the history of steps,
modularization and refactoring I did during the workshop. I think that
would be a plus to understand the code and how we came to it.&lt;/p&gt;

&lt;p&gt;This was my first time on FISL and it was great! And I expect that won&amp;rsquo;t
be my last.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Akademy 2012</title>
      <link>https://dakerfp.github.io/post/akademy-2012/</link>
      <pubDate>Sat, 16 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/akademy-2012/</guid>
      <description>&lt;p&gt;Hey folks, I&amp;rsquo;m going to &lt;a href=&#34;http://akademy.kde.org/&#34;&gt;Akademy&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/akademy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I and Thiago are going to present &lt;a href=&#34;http://akademy.kde.org/node/38&#34;&gt;Qt Components &amp;amp; Qt Styles in Qt5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope to see you in Tallinn!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/tallinn.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QML Theming/Styling (Update)</title>
      <link>https://dakerfp.github.io/post/qml-themingstyling-update/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qml-themingstyling-update/</guid>
      <description>

&lt;p&gt;This post is an update about the research project from my team,
described &lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;a few weeks ago&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the time we published the last post about QML Styling until now we
have worked on this set of issues/features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get feedback about research project&lt;/li&gt;
&lt;li&gt;Combo Box Component&lt;/li&gt;
&lt;li&gt;Combo Box Customizable Style&lt;/li&gt;
&lt;li&gt;Combo Box Plastique Style&lt;/li&gt;
&lt;li&gt;SubControl Styling&lt;/li&gt;
&lt;li&gt;Understand SceneGraph internals&lt;/li&gt;
&lt;li&gt;Understand other native platform internals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will detail what was possible to make for each of these topics in
sessions below.&lt;/p&gt;

&lt;h2 id=&#34;what-is-our-vision-now&#34;&gt;What is our vision now?&lt;/h2&gt;

&lt;p&gt;Last week, we have read a few blog posts, and talked with a few Qt &amp;amp; KDE
application developers about what should be the priorities for creating
desktop and mobile applications. I have presented our proposed solution
for using native look and feel for QML widgets, how to create custom
styles from scratch, using the CustomStyles helper, and how to apply
them with the ApplicationStyle API.&lt;/p&gt;

&lt;p&gt;Based on the feedback and the blog posts, my team sat down and came with
the following set of statements which summarize our vision for what
sould be our focus of our current research:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Usable QML components with native styles working ASAP&lt;/p&gt;

&lt;p&gt;Developers want to code entire application UI with QML having native
look and feel.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Easy customization&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s all about making easier to create components with different look
only by filling in some templates to avoid code repetition for standard.
These custom styles are targeted to be like a short cut, obviously for
more complex behaviour, you will need to create your own style.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Powerful customization&lt;/p&gt;

&lt;p&gt;Enabling to use QtQuick components as the style can make widgets look
fluid. It&amp;rsquo;s desirable that the new styling mechanism is at least as
powerful as QStyle is today. As a first shot we want to enable styling
do at least what QtWidgets style does. The main point here is to
maximize the results and minimize ramblings about what is style or not.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Styling modularization&lt;/p&gt;

&lt;p&gt;By spliting the old style scheme in a set of widget style, enables us to
create the style for each component/platform independently instead of
the monolithic QStyle. Now it&amp;rsquo;s easier to mix styles and change them on
demand more easily.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disruption with QtWidgets&lt;/p&gt;

&lt;p&gt;We wish to make this component set free from QtWidgets modules. One of
the reasons is because now it is considered
&lt;a href=&#34;http://labs.qt.nokia.com/2012/04/18/qt-5-c-and-qt-widgets/&#34;&gt;done&lt;/a&gt; and
it&amp;rsquo;s desirable for the new components set that it can be expanded. We
also don&amp;rsquo;t want to link with QtWidgets module, because the real
dependency should be the QStyle only. The current
&lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;ApplicationStyle&lt;/a&gt;
approach, shows us that the styles depends only on QtQuick. One of the
possible paths to achive this is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Move QStyles out of QtWidgets with a few adaptions on it.&lt;/li&gt;
&lt;li&gt;Create a SceneGraph based native styles when possible&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;combo-box&#34;&gt;Combo Box&lt;/h2&gt;

&lt;p&gt;We decided to choose the ComboBox component to work on because it is one
of the most complex (if it isn&amp;rsquo;t the most). Because of the complexity,
we hoped that during its development we could be enlightened of knowing
if we are in a correct path, what still misses, and what should be the
next steps.&lt;/p&gt;

&lt;p&gt;As we did in the Slider approach, which was divided in 3 different
&lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;subcomponents&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle&lt;/li&gt;
&lt;li&gt;Groove&lt;/li&gt;
&lt;li&gt;Tickmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While creating the ComboBox, we decided to divide it in 4 other subcomponents:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/combo-th.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ArrowStyle&lt;/li&gt;
&lt;li&gt;BackgroundStyle&lt;/li&gt;
&lt;li&gt;TextEditStyle&lt;/li&gt;
&lt;li&gt;DropListStyle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We basically mimicked how QStyle splits the QComboBox painting into
subcontrols. The drop list was also delegated a sub style as QComboBox
does with it&amp;rsquo;s internal QListView. We haven&amp;rsquo;t worked on the drop list
style since it would require a native style such as Plasma&amp;rsquo;s
ListItemView, which also would rely on a ScrollBar.&lt;/p&gt;

&lt;p&gt;Creating the combo box component showed us that positioning and size
hints can be more tricky than it looks like.&lt;/p&gt;

&lt;p&gt;The ComboBox got stuck in a few parts and unfortunately it&amp;rsquo;s not
complete right now. However we took the questions and answers from its
development. :-/&lt;/p&gt;

&lt;h2 id=&#34;positioning-and-size-hints&#34;&gt;Positioning and Size Hints&lt;/h2&gt;

&lt;p&gt;This topic of discussion came out when we were thinking about a
theoretical style in which the ComboBox would be in the left. One of the
issues we had in mind while developing the editable ComboBox was how to
set a MouseArea that can know when set the focus to the text edit or to
open the drop list. This would be possible to be done with current
QStyle, since on it&amp;rsquo;s approach the QWidget reads the subcomponent&amp;rsquo;s size
hints by the &lt;code&gt;subControlRect&lt;/code&gt; method from QStyle.&lt;/p&gt;

&lt;p&gt;We would like to have this positioning information on the style as well.
The approach can be similar to what happens with the size, which you can
read it from the widget reference.&lt;/p&gt;

&lt;p&gt;The following piece of code is a simple example of how size hints can be
taken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;
// ComboBox.qml
Item {
    property alias arrowStyle: arrowControl.sourceComponent

    Loader {
        id: arrowControl
        width: arrowControl.implicitWidth
        height: arrowControl.implicitHeight
    }

    MouseArea {
        anchors.fill: arrowControl
        onClicked: {
            // do some action
            // ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ArrowStyle defines the implicit size, which works as a size hint, and
the position where they are. These properties together can work analogue
to &lt;code&gt;subControlRect&lt;/code&gt;, as they hold the same info. The component may
ignore such hints and override the properties values, such as Slider&amp;rsquo;s
Handle style position.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// MyComboBoxArrowStyle.qml
Image {
    implicitWidth: 50
    implicitHeight: comboBox.height
    x: comboBox.width - width // Arrow could also appear on the left by setting x = 0
    source: &amp;quot;arrow.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One may ask &amp;ldquo;Can&amp;rsquo;t I have a round button with a circular hit area?&amp;rdquo;
That&amp;rsquo;s more complex than just setting hints for the geometry of sub
control styles. As we defined in our view we&amp;rsquo;re trying to be at least as
powerful as QStyle. We consider that, by now, we should be strict at
least about the interaction styling of the components themselves. From
my point behaviour difference should be defined as the component API.&lt;/p&gt;

&lt;h3 id=&#34;sub-stylecomponents-sets&#34;&gt;Sub StyleComponents Sets&lt;/h3&gt;

&lt;p&gt;Another discussed topic was about the fragmentation of the style
property of the components. For instance, take the following Slider
style code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Slider style now
Slider {
    grooveStyle: CustomGrooveStyle { ... }
    handleStyle: CustomHandleStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Slider style property is fragmented as more than one property. We
thought that these properties could be centralized with a SliderStyle as
an aggregator object. This helps API clarity for style manipulation
since we can play with a single object reference that represents the
component style, enabling to handle it atomically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Proposed Slider style usage
Slider {
    sliderStyle: CustomSliderStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with CustomSliderStyle as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Proposed Slider style creation
// CustomSliderStyle.qml

// Aggregated style object
SliderStyle {
    grooveStyle: CustomGrooveStyle { ... }
    handleStyle: CustomHandleStyle { ... }
    tickmarksStyle: CustomTickmarksStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or more compactly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;Slider {
    sliderStyle: SliderStyle {
        grooveStyle: NativeGrooveStyle { ... }
        handleStyle: CustomHandleStyle { ... }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;Slider {
    sliderStyle {
        grooveStyle: NativeGrooveStyle { ... }
        handleStyle: CustomHandleStyle { ... }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This issue is only an idea only discussed between ourselves. It would be
nice to have feedback about these API.&lt;/p&gt;

&lt;h2 id=&#34;insights-from-scenegraph-qstyle-study&#34;&gt;Insights from SceneGraph &amp;amp; QStyle study&lt;/h2&gt;

&lt;p&gt;The isolated study of the scene graph internals (getting rid of
QQuickPaintedItem), and how it could be used to create the new styles
directly on it, didn&amp;rsquo;t told us much in fact. Only that is better we keep
doing these styles in QML and using Scene Graph itself to create sub
elements that needs a more refined handling.&lt;/p&gt;

&lt;p&gt;On the other hand, the Windows and Mac styles investigation was very
important to decide our next steps. It showed us that these styles uses
platform native APIs to draw the native widgets on each platform on
pixmaps. So we would have to deeply study these API to create our own
implementation of native styles using the scene graph. For these reasons
isn&amp;rsquo;t too simple to give up from QQuickPaintedItem some time to going
deep on them right now since our time and head count is limited.&lt;/p&gt;

&lt;h2 id=&#34;two-steps-forward-one-step-back&#34;&gt;Two steps forward, one step back&lt;/h2&gt;

&lt;p&gt;After the feedback from other developers, one of the main thing people
want more is to have a widget set working with the native look and feel
as soon as possible. Keeping this as our primary focus, we will left the
restriction of depending on QtWidgets for now. So we will focus on
having a working solution that can be easily replaced after.
Fortunately, our proposed modular solution for styling fills that
requisite.&lt;/p&gt;

&lt;p&gt;Labels: &lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/kde&#34;&gt;kde&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qml&#34;&gt;qml&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qt&#34;&gt;qt&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qt5&#34;&gt;qt5&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtcomponents&#34;&gt;qtcomponents&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtquick&#34;&gt;qtquick&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtquickstyles&#34;&gt;qtquickstyles&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/styles&#34;&gt;styles&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/theme&#34;&gt;theme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qt, KDE &amp; Akademy 2012 Event Guide Application</title>
      <link>https://dakerfp.github.io/post/qt-kde-akademy-2012-event-guide/</link>
      <pubDate>Thu, 08 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qt-kde-akademy-2012-event-guide/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been away from KDE activities from a time, because I was organizing
a lot of stuff in my life. Happily I&amp;rsquo;ve finally arranged some time to
hack more on the weekends. I&amp;rsquo;ll try to keep up the work with the Plasma
Components &lt;a href=&#34;http://api.kde.org/4.x-api/plasma-qml-apidocs/&#34;&gt;documentation&lt;/a&gt;,
because I think it can be improved a lot. I will also try to come up with
a few examples inside the documentation, to make easier for plasmoid
developers.&lt;/p&gt;

&lt;p&gt;Another long term goal for this year, which I already started to
investigate, is how to optimize  Qt Components for more about the Qt QML
Components, beyond Plasma, and I&amp;rsquo;m already investigating how can we do
proper styling for Qt5.&lt;/p&gt;

&lt;p&gt;In another thread, I&amp;rsquo;m also having a great experience by working with
&lt;a href=&#34;http://pinheiro-kde.blogspot.com/&#34;&gt;Nuno&lt;/a&gt; in an application for the
&lt;a href=&#34;http://akademy.kde.org/&#34;&gt;Akademy 2012&lt;/a&gt;, at Tallinn, Estonia. The
application it&amp;rsquo;s basically a guide for the event, with essential
information about it. It will also include a programme which will alert
you about the presentations you want to attend to. And it&amp;rsquo;s being such a
great experience to share ideas with him!&lt;/p&gt;

&lt;p&gt;Here are some snapshots of the app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/akademy-app.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to check it yourself, just clone the git repo:
git@git.kde.org:scratch/pinheiro/akademy2012&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back to Plasma Components</title>
      <link>https://dakerfp.github.io/post/back_to_plasma_components/</link>
      <pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/back_to_plasma_components/</guid>
      <description>

&lt;p&gt;This last month I&amp;rsquo;ve been working slowly on my GSoC project due to the
university activities (due to Brazilian academic calendar). And my
thesis, which I shall talk in other post. But at least now I&amp;rsquo;m
undergraduated!&lt;/p&gt;

&lt;p&gt;As I explained in my last post about [Plasma Components],
my GSoC project. I&amp;rsquo;m building graphics components for developers to
build plasmoids in QML using non trivial common components such as
Sliders, ScrollBars and RadioButtons. After the break I&amp;rsquo;ve done these
components following the &lt;a href=&#34;http://bugreports.qt.nokia.com/browse/QTCOMPONENTS-200&#34;&gt;Qt Components common
API&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch&lt;/li&gt;
&lt;li&gt;ButtonRow&lt;/li&gt;
&lt;li&gt;ButtonColumn&lt;/li&gt;
&lt;li&gt;ScrollBar&lt;/li&gt;
&lt;li&gt;ScrollDecorator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keyboard event handling and focus policy for the new and old components
were added in this sprint. I also spent a lot of time refactoring some
components. I think their code is much better now.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also adding more complex use cases at the components gallery (at
kde-runtime/plasma/declarativeimports/test/gallery). By the way, this is
screenshot of the new gallery:&lt;/p&gt;

&lt;p&gt;![](/img/gsoc-gallery.png]&lt;/p&gt;

&lt;h2 id=&#34;plasma-components-gallery&#34;&gt;Plasma Components Gallery&lt;/h2&gt;

&lt;p&gt;Part of the work was just straightforward, but there are some doubts I
would like to ask which you think is the best, because some of the
components behaviour are not defined.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Should ScrollDecorator appear only when it&amp;rsquo;s flickableItem is
flicked, like in the mobile use case?&lt;/li&gt;
&lt;li&gt;ScrollDecorator must should look like ScrollBar or have it&amp;rsquo;s own
appearence?&lt;/li&gt;
&lt;li&gt;There are no SVG graphics for CheckBox, RadioButton and Switch.
Currently there are placeholders. What can I do?&lt;/li&gt;
&lt;li&gt;Currently, when you click a component, it gains the focus. This
logic must be in the components as it is? Or should left it external
to the button.&lt;/li&gt;
&lt;li&gt;The Qt Components doesn&amp;rsquo;t define any enabled property, for any
components. I think it&amp;rsquo;s important to have such a property in all
interactive components. What do you think about it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any suggestion is highly appreciated.&lt;/p&gt;

&lt;p&gt;I expect to give other update as soon as I have something more to
report.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PySide at CITi</title>
      <link>https://dakerfp.github.io/post/pyside_at_citi/</link>
      <pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/pyside_at_citi/</guid>
      <description>&lt;p&gt;Here is the &lt;a href=&#34;http://www.pyside.org/&#34;&gt;PySide&lt;/a&gt; slides from the python
course at &lt;a href=&#34;http://www.citi.org.br/&#34;&gt;CITi&lt;/a&gt;. Have fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/dakerfp/citi-pyside&#34; title=&#34;CITi - PySide&#34;&gt;CITi - PySide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QtQuick - WSL II</title>
      <link>https://dakerfp.github.io/post/qtquick-wsl-ii/</link>
      <pubDate>Fri, 27 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qtquick-wsl-ii/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/qtquick/&#34;&gt;QtQuick&lt;/a&gt; uses QML, a powerful tool for
creating fluid interfaces in a clean, easy and fast way. It uses a
declarative language (Javascript based) and it has a really good
performance, which makes it suitable to make apps for any kind of
platform. It&amp;rsquo;s also really easy to extend QML with Qt/C++, enbling
developers to speedup the application logic or something else needed. Is
also possible to use OpenGL to render QtQuick without any change in the
code, sending the painting job to the video card. IMHO, it&amp;rsquo;s greatest
advantage, is because suitable for designer who already know HTML and
CSS to build awesome interfaces, being easier than Flash and
ActionScript. This is really welcome because the QtQuick prototypes are
more straightforward, because can be directly integrated in the final
application code.&lt;/p&gt;

&lt;p&gt;These are some videos showing what can be done with QtQuick:&lt;/p&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/rqt7vM_vP3o?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/GuAxYgOjOVA?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/n3W5O2biSPU?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/KLQD2jYS-XU?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;ve been developing with QtQuick (and some extensions such as the
MeeGo and the &lt;a href=&#34;http://codecereal.blogspot.com/2011/05/plasma-components.html&#34;&gt;Plasma Components&lt;/a&gt;)
for quite a long time (for almost a year from now). So I&amp;rsquo;m sharing my
QtQuick presentation on the II Workshop of Free Software at CIn-UFPE at
28/03/2011. The workshop was organized by the University Linux User
Group (&lt;a href=&#34;http://cinlug-br.org/&#34;&gt;CIn-LUG&lt;/a&gt;) with the intent to show new
free technologies and show how to start using them.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/HPTyeuPmjr2cuh&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/dakerfp/qtquick-wsl-ii&#34; title=&#34;QtQuick - WSL II&#34; target=&#34;_blank&#34;&gt;QtQuick - WSL II&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/dakerfp&#34; target=&#34;_blank&#34;&gt;Daker Fernandes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The exercises resources and examples can be found
&lt;a href=&#34;http://dl.dropbox.com/u/8800422/qtquick-wsl-exercises.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>