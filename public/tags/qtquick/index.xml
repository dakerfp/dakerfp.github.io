<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qtquick on Daker Pinheiro</title>
    <link>https://dakerfp.github.io/tags/qtquick/</link>
    <description>Recent content in Qtquick on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Mon, 14 May 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dakerfp.github.io/tags/qtquick/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>QML Theming/Styling (Update)</title>
      <link>https://dakerfp.github.io/post/qml-themingstyling-update/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qml-themingstyling-update/</guid>
      <description>

&lt;p&gt;This post is an update about the research project from my team,
described &lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;a few weeks ago&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the time we published the last post about QML Styling until now we
have worked on this set of issues/features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get feedback about research project&lt;/li&gt;
&lt;li&gt;Combo Box Component&lt;/li&gt;
&lt;li&gt;Combo Box Customizable Style&lt;/li&gt;
&lt;li&gt;Combo Box Plastique Style&lt;/li&gt;
&lt;li&gt;SubControl Styling&lt;/li&gt;
&lt;li&gt;Understand SceneGraph internals&lt;/li&gt;
&lt;li&gt;Understand other native platform internals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will detail what was possible to make for each of these topics in
sessions below.&lt;/p&gt;

&lt;h2 id=&#34;what-is-our-vision-now&#34;&gt;What is our vision now?&lt;/h2&gt;

&lt;p&gt;Last week, we have read a few blog posts, and talked with a few Qt &amp;amp; KDE
application developers about what should be the priorities for creating
desktop and mobile applications. I have presented our proposed solution
for using native look and feel for QML widgets, how to create custom
styles from scratch, using the CustomStyles helper, and how to apply
them with the ApplicationStyle API.&lt;/p&gt;

&lt;p&gt;Based on the feedback and the blog posts, my team sat down and came with
the following set of statements which summarize our vision for what
sould be our focus of our current research:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Usable QML components with native styles working ASAP&lt;/p&gt;

&lt;p&gt;Developers want to code entire application UI with QML having native
look and feel.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Easy customization&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s all about making easier to create components with different look
only by filling in some templates to avoid code repetition for standard.
These custom styles are targeted to be like a short cut, obviously for
more complex behaviour, you will need to create your own style.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Powerful customization&lt;/p&gt;

&lt;p&gt;Enabling to use QtQuick components as the style can make widgets look
fluid. It&amp;rsquo;s desirable that the new styling mechanism is at least as
powerful as QStyle is today. As a first shot we want to enable styling
do at least what QtWidgets style does. The main point here is to
maximize the results and minimize ramblings about what is style or not.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Styling modularization&lt;/p&gt;

&lt;p&gt;By spliting the old style scheme in a set of widget style, enables us to
create the style for each component/platform independently instead of
the monolithic QStyle. Now it&amp;rsquo;s easier to mix styles and change them on
demand more easily.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disruption with QtWidgets&lt;/p&gt;

&lt;p&gt;We wish to make this component set free from QtWidgets modules. One of
the reasons is because now it is considered
&lt;a href=&#34;http://labs.qt.nokia.com/2012/04/18/qt-5-c-and-qt-widgets/&#34;&gt;done&lt;/a&gt; and
it&amp;rsquo;s desirable for the new components set that it can be expanded. We
also don&amp;rsquo;t want to link with QtWidgets module, because the real
dependency should be the QStyle only. The current
&lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;ApplicationStyle&lt;/a&gt;
approach, shows us that the styles depends only on QtQuick. One of the
possible paths to achive this is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Move QStyles out of QtWidgets with a few adaptions on it.&lt;/li&gt;
&lt;li&gt;Create a SceneGraph based native styles when possible&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;combo-box&#34;&gt;Combo Box&lt;/h2&gt;

&lt;p&gt;We decided to choose the ComboBox component to work on because it is one
of the most complex (if it isn&amp;rsquo;t the most). Because of the complexity,
we hoped that during its development we could be enlightened of knowing
if we are in a correct path, what still misses, and what should be the
next steps.&lt;/p&gt;

&lt;p&gt;As we did in the Slider approach, which was divided in 3 different
&lt;a href=&#34;http://codecereal.blogspot.com.br/2012/04/qml-themingstyling.html&#34;&gt;subcomponents&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle&lt;/li&gt;
&lt;li&gt;Groove&lt;/li&gt;
&lt;li&gt;Tickmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While creating the ComboBox, we decided to divide it in 4 other subcomponents:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/combo-th.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ArrowStyle&lt;/li&gt;
&lt;li&gt;BackgroundStyle&lt;/li&gt;
&lt;li&gt;TextEditStyle&lt;/li&gt;
&lt;li&gt;DropListStyle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We basically mimicked how QStyle splits the QComboBox painting into
subcontrols. The drop list was also delegated a sub style as QComboBox
does with it&amp;rsquo;s internal QListView. We haven&amp;rsquo;t worked on the drop list
style since it would require a native style such as Plasma&amp;rsquo;s
ListItemView, which also would rely on a ScrollBar.&lt;/p&gt;

&lt;p&gt;Creating the combo box component showed us that positioning and size
hints can be more tricky than it looks like.&lt;/p&gt;

&lt;p&gt;The ComboBox got stuck in a few parts and unfortunately it&amp;rsquo;s not
complete right now. However we took the questions and answers from its
development. :-/&lt;/p&gt;

&lt;h2 id=&#34;positioning-and-size-hints&#34;&gt;Positioning and Size Hints&lt;/h2&gt;

&lt;p&gt;This topic of discussion came out when we were thinking about a
theoretical style in which the ComboBox would be in the left. One of the
issues we had in mind while developing the editable ComboBox was how to
set a MouseArea that can know when set the focus to the text edit or to
open the drop list. This would be possible to be done with current
QStyle, since on it&amp;rsquo;s approach the QWidget reads the subcomponent&amp;rsquo;s size
hints by the &lt;code&gt;subControlRect&lt;/code&gt; method from QStyle.&lt;/p&gt;

&lt;p&gt;We would like to have this positioning information on the style as well.
The approach can be similar to what happens with the size, which you can
read it from the widget reference.&lt;/p&gt;

&lt;p&gt;The following piece of code is a simple example of how size hints can be
taken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;
// ComboBox.qml
Item {
    property alias arrowStyle: arrowControl.sourceComponent

    Loader {
        id: arrowControl
        width: arrowControl.implicitWidth
        height: arrowControl.implicitHeight
    }

    MouseArea {
        anchors.fill: arrowControl
        onClicked: {
            // do some action
            // ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ArrowStyle defines the implicit size, which works as a size hint, and
the position where they are. These properties together can work analogue
to &lt;code&gt;subControlRect&lt;/code&gt;, as they hold the same info. The component may
ignore such hints and override the properties values, such as Slider&amp;rsquo;s
Handle style position.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// MyComboBoxArrowStyle.qml
Image {
    implicitWidth: 50
    implicitHeight: comboBox.height
    x: comboBox.width - width // Arrow could also appear on the left by setting x = 0
    source: &amp;quot;arrow.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One may ask &amp;ldquo;Can&amp;rsquo;t I have a round button with a circular hit area?&amp;rdquo;
That&amp;rsquo;s more complex than just setting hints for the geometry of sub
control styles. As we defined in our view we&amp;rsquo;re trying to be at least as
powerful as QStyle. We consider that, by now, we should be strict at
least about the interaction styling of the components themselves. From
my point behaviour difference should be defined as the component API.&lt;/p&gt;

&lt;h3 id=&#34;sub-stylecomponents-sets&#34;&gt;Sub StyleComponents Sets&lt;/h3&gt;

&lt;p&gt;Another discussed topic was about the fragmentation of the style
property of the components. For instance, take the following Slider
style code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Slider style now
Slider {
    grooveStyle: CustomGrooveStyle { ... }
    handleStyle: CustomHandleStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Slider style property is fragmented as more than one property. We
thought that these properties could be centralized with a SliderStyle as
an aggregator object. This helps API clarity for style manipulation
since we can play with a single object reference that represents the
component style, enabling to handle it atomically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Proposed Slider style usage
Slider {
    sliderStyle: CustomSliderStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with CustomSliderStyle as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;// Proposed Slider style creation
// CustomSliderStyle.qml

// Aggregated style object
SliderStyle {
    grooveStyle: CustomGrooveStyle { ... }
    handleStyle: CustomHandleStyle { ... }
    tickmarksStyle: CustomTickmarksStyle { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or more compactly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;Slider {
    sliderStyle: SliderStyle {
        grooveStyle: NativeGrooveStyle { ... }
        handleStyle: CustomHandleStyle { ... }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-qml&#34;&gt;Slider {
    sliderStyle {
        grooveStyle: NativeGrooveStyle { ... }
        handleStyle: CustomHandleStyle { ... }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This issue is only an idea only discussed between ourselves. It would be
nice to have feedback about these API.&lt;/p&gt;

&lt;h2 id=&#34;insights-from-scenegraph-qstyle-study&#34;&gt;Insights from SceneGraph &amp;amp; QStyle study&lt;/h2&gt;

&lt;p&gt;The isolated study of the scene graph internals (getting rid of
QQuickPaintedItem), and how it could be used to create the new styles
directly on it, didn&amp;rsquo;t told us much in fact. Only that is better we keep
doing these styles in QML and using Scene Graph itself to create sub
elements that needs a more refined handling.&lt;/p&gt;

&lt;p&gt;On the other hand, the Windows and Mac styles investigation was very
important to decide our next steps. It showed us that these styles uses
platform native APIs to draw the native widgets on each platform on
pixmaps. So we would have to deeply study these API to create our own
implementation of native styles using the scene graph. For these reasons
isn&amp;rsquo;t too simple to give up from QQuickPaintedItem some time to going
deep on them right now since our time and head count is limited.&lt;/p&gt;

&lt;h2 id=&#34;two-steps-forward-one-step-back&#34;&gt;Two steps forward, one step back&lt;/h2&gt;

&lt;p&gt;After the feedback from other developers, one of the main thing people
want more is to have a widget set working with the native look and feel
as soon as possible. Keeping this as our primary focus, we will left the
restriction of depending on QtWidgets for now. So we will focus on
having a working solution that can be easily replaced after.
Fortunately, our proposed modular solution for styling fills that
requisite.&lt;/p&gt;

&lt;p&gt;Labels: &lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/kde&#34;&gt;kde&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qml&#34;&gt;qml&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qt&#34;&gt;qt&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qt5&#34;&gt;qt5&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtcomponents&#34;&gt;qtcomponents&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtquick&#34;&gt;qtquick&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/qtquickstyles&#34;&gt;qtquickstyles&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/styles&#34;&gt;styles&lt;/a&gt;,
&lt;a href=&#34;http://codecereal.blogspot.com.br/search/label/theme&#34;&gt;theme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QtQuick - WSL II</title>
      <link>https://dakerfp.github.io/post/qtquick-wsl-ii/</link>
      <pubDate>Fri, 27 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/qtquick-wsl-ii/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/qtquick/&#34;&gt;QtQuick&lt;/a&gt; uses QML, a powerful tool for
creating fluid interfaces in a clean, easy and fast way. It uses a
declarative language (Javascript based) and it has a really good
performance, which makes it suitable to make apps for any kind of
platform. It&amp;rsquo;s also really easy to extend QML with Qt/C++, enbling
developers to speedup the application logic or something else needed. Is
also possible to use OpenGL to render QtQuick without any change in the
code, sending the painting job to the video card. IMHO, it&amp;rsquo;s greatest
advantage, is because suitable for designer who already know HTML and
CSS to build awesome interfaces, being easier than Flash and
ActionScript. This is really welcome because the QtQuick prototypes are
more straightforward, because can be directly integrated in the final
application code.&lt;/p&gt;

&lt;p&gt;These are some videos showing what can be done with QtQuick:&lt;/p&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/rqt7vM_vP3o?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/GuAxYgOjOVA?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/n3W5O2biSPU?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/KLQD2jYS-XU?feature=player_embedded&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;ve been developing with QtQuick (and some extensions such as the
MeeGo and the &lt;a href=&#34;http://codecereal.blogspot.com/2011/05/plasma-components.html&#34;&gt;Plasma Components&lt;/a&gt;)
for quite a long time (for almost a year from now). So I&amp;rsquo;m sharing my
QtQuick presentation on the II Workshop of Free Software at CIn-UFPE at
28/03/2011. The workshop was organized by the University Linux User
Group (&lt;a href=&#34;http://cinlug-br.org/&#34;&gt;CIn-LUG&lt;/a&gt;) with the intent to show new
free technologies and show how to start using them.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/HPTyeuPmjr2cuh&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/dakerfp/qtquick-wsl-ii&#34; title=&#34;QtQuick - WSL II&#34; target=&#34;_blank&#34;&gt;QtQuick - WSL II&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/dakerfp&#34; target=&#34;_blank&#34;&gt;Daker Fernandes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The exercises resources and examples can be found
&lt;a href=&#34;http://dl.dropbox.com/u/8800422/qtquick-wsl-exercises.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plasma Components</title>
      <link>https://dakerfp.github.io/post/plasma-components/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.github.io/post/plasma-components/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I will talk about my GSoC project (\m/), the plasma components.
As you may know, QML is a declarative language to build rich interfaces
introduced in Qt 4.7 by providing simple primitives. As it is a powerful
way to develop interfaces and it&amp;rsquo;s the future of UI development for Qt
was necessary to make the plasma support it.&lt;/p&gt;

&lt;p&gt;Create interfaces in QML is really easy and fast but sometimes we need
common widgets and may be boring to reimplement and replicate them in
every application we create (e.g. Button, Slider, ScrollBar). For avoid
this code replication, the Qt Components project was created to unify an
API for a set of components.&lt;/p&gt;

&lt;p&gt;The current (often updated) defined components and it&amp;rsquo;s API can be
found at
&lt;a href=&#34;http://bugreports.qt.nokia.com/browse/QTCOMPONENTS-200&#34;&gt;QTCOMPONENTS-200&lt;/a&gt;.
The Qt Components intends to be a cross platform, but sometimes we need
to have a closer integration of the component and the platform. In
plasma desktop we want to show tooltips or use the theme svg images for
example. The common API defines a set of properties a component must
have, but doesn&amp;rsquo;t disallow to have extra properties and functionalities
(suggestions ?). Creating the plasma components with the theme
integration and adding plasma behaviour is what my GSoC project is about
:-).&lt;/p&gt;

&lt;p&gt;I already started working on the plasma components. They can be found
in the kde-runtime repository at the plasma/declarative branch. And more
speciffically in the plasma/declarativeimports/plasmacomponents
directory. The components which already there are not yet done, they
lack of tooltips, keyboard events handling, focus policy, and some
(CheckBox and RadioButton) hasn&amp;rsquo;t images yet. However they&amp;rsquo;re fully
functional and they cover all the properties and behaviours defined in
the common API. Here is the list of the components in this state
mentioned above (until this post publication):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BusyIndicator&lt;/li&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;CheckBox&lt;/li&gt;
&lt;li&gt;RadioButton&lt;/li&gt;
&lt;li&gt;Slider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are components not present in the common API but they&amp;rsquo;re highly
wanted in plasma:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ScrollBar&lt;/li&gt;
&lt;li&gt;ListItem&lt;/li&gt;
&lt;li&gt;ListItemView&lt;/li&gt;
&lt;li&gt;ListHighlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test these components, its also kept a components gallery
(plasma/declarativeimports/test/Gallery.qml) that you may view it with
qmlviewer (after installing the components).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dakerfp.github.io/img/gallery.png&#34; alt=&#34;Gallery screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feedback is highly appreciated. ;-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>