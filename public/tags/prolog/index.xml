<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prolog on Daker Pinheiro</title>
    <link>https://dakerfp.com/tags/prolog/</link>
    <description>Recent content in Prolog on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>â’¸ 2017 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Tue, 07 Jan 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dakerfp.com/tags/prolog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Regex like operators for DCG</title>
      <link>https://dakerfp.com/post/regex-like-operators-for-dcg/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/regex-like-operators-for-dcg/</guid>
      <description>Today I was trying to create a simple parser to count syllables in latin words with Prolog. I usually use DCGs in Prolog for parsing. Their semantic is very similar to BNF. I love DCGs, but sometimes the verbosity in some cases annoys me. Take the following example:
consonant --&amp;gt; &amp;quot;b&amp;quot;; &amp;quot;c&amp;quot;; &amp;quot;d&amp;quot;; &amp;quot;f&amp;quot;; &amp;quot;g&amp;quot;; &amp;quot;h&amp;quot;; &amp;quot;l&amp;quot;; &amp;quot;j&amp;quot;; &amp;quot;k&amp;quot;; &amp;quot;m&amp;quot;; &amp;quot;n&amp;quot;; &amp;quot;p&amp;quot;; &amp;quot;q&amp;quot;; &amp;quot;r&amp;quot;; &amp;quot;s&amp;quot;; &amp;quot;t&amp;quot;; &amp;quot;v&amp;quot;; &amp;quot;x&amp;quot;; &amp;quot;z&amp;quot;. consonants --&amp;gt; [].</description>
    </item>
    
    <item>
      <title>DiagnostiCar (4) - Abductive Reasoning</title>
      <link>https://dakerfp.com/post/diagnosticar-4-abductive-reasoning/</link>
      <pubDate>Thu, 29 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/diagnosticar-4-abductive-reasoning/</guid>
      <description>Finally I had some time to write about abductive reasoning, the core of the DiagnostiCar expert system. As you may know from my previous posts (means you&amp;rsquo;re tough and reached this point), the abductive reasoning tries to infer what facts implies a given situation.
To build such a reasoning we must start with the conclusion and try to prove it. Let&amp;rsquo;s say that we have the following scenario:
known mortal(X) &amp;lt;- human(X).</description>
    </item>
    
    <item>
      <title>DiagnostiCar (2) - Knowledge Representation Language</title>
      <link>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</link>
      <pubDate>Sun, 11 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</guid>
      <description>I&amp;rsquo;m giving sequence to the last post about the DiagnostiCar expert system. Today I&amp;rsquo;m going to specify the predicates to represent some domain specific knowledge.
Prolog has a helpful and clean syntax, at least when you&amp;rsquo;re used to, and it&amp;rsquo;s easy to define new operators syntax in SWI. Such feature improves the readability of the knowledge base or other DSL you want to create.
To make an abductive reasoning we will need at least the logic operators &amp;lsquo;and&amp;rsquo;,&amp;lsquo;or&amp;rsquo; and &amp;lsquo;implies&amp;rsquo; to represent knowledge and chain it.</description>
    </item>
    
    <item>
      <title>DiagnostiCar (1) - Introduction</title>
      <link>https://dakerfp.com/post/diagnosticar-1/</link>
      <pubDate>Wed, 07 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/diagnosticar-1/</guid>
      <description>I&amp;rsquo;m here to tell my expirience with logic programming in a grad project: DiagnostiCar, an web expert system for car diagnosis.
The DiagnostiCar core feature was an expert system for giving hints to laypeople about their cars symptoms and their causes and consequences to avoid being deceived by mechanics (an habit of the job). Communication between the system and the users was conceived to happen with multiple choice questions forms and at the end the system gives the possible causes for the observed car characteristics.</description>
    </item>
    
  </channel>
</rss>