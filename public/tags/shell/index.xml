<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on Daker Pinheiro</title>
    <link>https://dakerfp.com/tags/shell/</link>
    <description>Recent content in Shell on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>â’¸ 2017 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Sun, 11 Apr 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dakerfp.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DiagnostiCar (2) - Knowledge Representation Language</title>
      <link>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</link>
      <pubDate>Sun, 11 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dakerfp.com/post/diagnosticar-2-knowledge-representation-language/</guid>
      <description>I&amp;rsquo;m giving sequence to the last post about the DiagnostiCar expert system. Today I&amp;rsquo;m going to specify the predicates to represent some domain specific knowledge.
Prolog has a helpful and clean syntax, at least when you&amp;rsquo;re used to, and it&amp;rsquo;s easy to define new operators syntax in SWI. Such feature improves the readability of the knowledge base or other DSL you want to create.
To make an abductive reasoning we will need at least the logic operators &amp;lsquo;and&amp;rsquo;,&amp;lsquo;or&amp;rsquo; and &amp;lsquo;implies&amp;rsquo; to represent knowledge and chain it.</description>
    </item>
    
  </channel>
</rss>