<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Daker Pinheiro</title>
    <link>http://dakerfp.github.io/post/</link>
    <description>Recent content in Posts on Daker Pinheiro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daker Fernandes Pinheiro</copyright>
    <lastBuildDate>Thu, 07 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://dakerfp.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Singletons using std::weak_ptr</title>
      <link>http://dakerfp.github.io/post/weak_ptr_singleton/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/weak_ptr_singleton/</guid>
      <description>&lt;p&gt;A common issue is how a resource and initialize it only when needed.
A common C++ pattern to solve this is using the Resource Acquisition Is Initialization aka RAII.
That&amp;rsquo;s what smart pointers do when created and get out of scope.
But what if these resources must be unique?&lt;/p&gt;

&lt;p&gt;The first thing that comes in mind is a singleton, but the plain singleton
pattern, which has a static method or function returning a raw pointer usually creates the resource only once.
It is hardly released, or must explicitly released. The solution is to use smart pointers somehow.&lt;/p&gt;

&lt;p&gt;The following code is the solution I came out with to solve it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;memory&amp;gt;

class Resource {
private:
    // A good API should forbid invalid usage.
    Resource() {
        // initialize
    }

public:
    ~Resource() {
        // release
    }

    static std::shared_ptr&amp;lt;Resource&amp;gt; instance() {
        static std::weak_ptr&amp;lt;Resource&amp;gt; _instance;
        if (auto ptr = _instance.lock()) { // .lock() returns a shared_ptr and increments the refcount
            return ptr;
        }
        // Does not support std::make_shared&amp;lt;Resource&amp;gt; because of
        // the Resource private constructor.
        auto ptr = std::shared_ptr&amp;lt;Resource&amp;gt;(new Resource());
        _instance = ptr;
        return ptr;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting aspect is the static weak_ptr which registers the resource,
but does not prevents its release, when all returned shared_ptr release the resource.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>libpong bynary size</title>
      <link>http://dakerfp.github.io/post/binary-size/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/binary-size/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently created a very small library to
make hello world in IoT more interesting than
a simple blinking LED.&lt;/p&gt;

&lt;p&gt;Why not playing pong?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a simple C library which
implements a very simple pong game logic.
Very simple and small to fit in anywhere you
want.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ size libpong/liblibpong.a 
   text	   data	    bss	    dec	    hex	filename
    323	      0	      0	    323	    143	pong.c.o 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python cookbook: argmin &amp; argmax</title>
      <link>http://dakerfp.github.io/post/python-argmin-argmax/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/python-argmin-argmax/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def argmin(iter, function):
    return min((f(x), x) for x in iter)[1]

def argmax(iter, function):
    return max((f(x), x) for x in iter)[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; argmin(range(-100, 100), lambda x: x * x)
0
&amp;gt;&amp;gt;&amp;gt; argmax(range(-100, 100), lambda x: - x * x)
0
&amp;gt;&amp;gt;&amp;gt; argmax([[1, 2, 4], [1], [2, 5], []], len)
[1, 2, 4]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PIL -&gt; Pillow</title>
      <link>http://dakerfp.github.io/post/pil-pillow/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/pil-pillow/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pillow.readthedocs.org/en/latest/index.html&#34;&gt;Pillow&lt;/a&gt; is a
&lt;a href=&#34;http://pythonware.com/products/pil/&#34;&gt;PIL&lt;/a&gt; fork created to add new
features. setuptools support was also added. A more frequent release
cycle was also promised. With Pillow you can have PIL as a package
dependency in setuptools and virtualenv. That means less clutter and
robustness for us.&lt;/p&gt;

&lt;p&gt;Pillow allows you to continue to use &lt;code&gt;import PIL&lt;/code&gt;, so there is no need
to change your current PIL related code. 0 migration overhead.&lt;/p&gt;

&lt;p&gt;Archlinux already dropped support for PIL in favor of Pillow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR PIL &amp;gt; Pillow&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reload and unload modules in Python</title>
      <link>http://dakerfp.github.io/post/reload-and-unload-modules-in-python/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/reload-and-unload-modules-in-python/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python 2.7
import math

reload(math) # or import math again to reload the module
del(math) # unload module
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python 3.x
import math

# the reload function was eliminated on python 3
import math # or use exec(&amp;quot;import math&amp;quot;)
del(math) # remove module
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python cookbook: get the file dir path</title>
      <link>http://dakerfp.github.io/post/python-cookbook-get-file-dir-path/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/python-cookbook-get-file-dir-path/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
os.path.dirname(os.path.abspath(__file__))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Regex like operators for DCG</title>
      <link>http://dakerfp.github.io/post/regex-like-operators-for-dcg/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/regex-like-operators-for-dcg/</guid>
      <description>&lt;p&gt;Today I was trying to create a simple parser to count syllables in latin
words with Prolog. I usually use DCGs in Prolog for parsing. Their
semantic is very similar to
&lt;a href=&#34;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form&#34;&gt;BNF&lt;/a&gt;. I love
DCGs, but sometimes the verbosity in some cases annoys me. Take the
following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;consonant --&amp;gt;
    &amp;quot;b&amp;quot;; &amp;quot;c&amp;quot;; &amp;quot;d&amp;quot;; &amp;quot;f&amp;quot;; &amp;quot;g&amp;quot;; &amp;quot;h&amp;quot;; &amp;quot;l&amp;quot;; &amp;quot;j&amp;quot;; &amp;quot;k&amp;quot;; &amp;quot;m&amp;quot;;
    &amp;quot;n&amp;quot;; &amp;quot;p&amp;quot;; &amp;quot;q&amp;quot;; &amp;quot;r&amp;quot;; &amp;quot;s&amp;quot;; &amp;quot;t&amp;quot;; &amp;quot;v&amp;quot;; &amp;quot;x&amp;quot;; &amp;quot;z&amp;quot;.
consonants --&amp;gt;
    [].
consonants --&amp;gt;
    consonant, consonants.

vowel --&amp;gt;
    &amp;quot;a&amp;quot;; &amp;quot;e&amp;quot;; &amp;quot;i&amp;quot;; &amp;quot;o&amp;quot;; &amp;quot;u&amp;quot;.
vowels --&amp;gt;
    vowel.
vowels --&amp;gt;
    vowel, vowels.

syllable --&amp;gt;
    vowels.
syllable --&amp;gt;
    consonants, vowels.

syllables(0) --&amp;gt;
    [].
syllables(N) --&amp;gt;
    syllable, syllables(N_1),
    { N is N_1 + 1 }.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The vowels and consonant rules were created merely as helpers for the
syllable predicate. That could be reduced if I had regex operators like
+, * or ?. Although there are modules for using regex in Prolog (
swi-regex ), it is not suitable when using within in DCGs. So I wrote
these regex like operators, with meta DCG predicates, for DCG (like EBNF
operators):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;% op statements let me use them without parenthesis
:- op(100, xf, *).
:- op(100, xf, +).
:- op(100, xf, ?).

*(_) --&amp;gt;
    [].
*(EXPR) --&amp;gt;
    EXPR, *(EXPR).

+(EXPR) --&amp;gt;
    EXPR.
+(EXPR) --&amp;gt;
    EXPR, +(EXPR).

?(EXPR) --&amp;gt;
    [].
?(EXPR) --&amp;gt;
    EXPR.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They allow me to modify the times a given rule will be matched. So, I
can replace this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;consonants --&amp;gt;
    [].
consonants --&amp;gt;
    consonant, consonants.

vowels --&amp;gt;
    vowel.
vowels --&amp;gt;
    vowel, vowels.

syllable --&amp;gt;
    vowels.
syllable --&amp;gt;
    consonants, vowels.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with a simpler version without intermediate rules (using the operators
definition through a library):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;syllable --&amp;gt;
    *consonant, +vowel.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Improve your lazy debugging in C&#43;&#43;</title>
      <link>http://dakerfp.github.io/post/improve-your-lazy-debugging-in-c/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/improve-your-lazy-debugging-in-c/</guid>
      <description>&lt;p&gt;Are you too lazy to learn your debugger? When debugging, I usually want
to know if some code section is reached.&lt;/p&gt;

&lt;p&gt;I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void foobar() {
    printf(&amp;quot;foobar()\n&amp;quot;);
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I should use &lt;a href=&#34;http://stackoverflow.com/questions/2872543/printf-vs-cout-in-c&#34;&gt;&lt;code&gt;cout&lt;/code&gt; instead &lt;code&gt;printf&lt;/code&gt; in C++&lt;/a&gt;.
&lt;a href=&#34;http://programming-designs.com/2009/02/c-speed-test-part-2-printf-vs-cout/&#34;&gt;&lt;code&gt;printf&lt;/code&gt; is faster&lt;/a&gt;,
but in this case it should be irrelevant. So I have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void foobar() {
    std::cout &amp;lt;&amp;lt; &amp;quot;foobar()&amp;quot; &amp;lt;&amp;lt; std::endl;
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html&#34;&gt;GCC&amp;rsquo;s function name macro &lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html&#34;&gt;&lt;code&gt;__LINE__&lt;/code&gt; macro&lt;/a&gt;
to identify the reached code section easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void foobar() {
    std::cout &amp;lt;&amp;lt;  __PRETTY_FUNCTION__ &amp;lt;&amp;lt; &amp;quot; at line &amp;quot; &amp;lt;&amp;lt;  __LINE__ &amp;lt;&amp;lt; std::endl;
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add that on a macro to reuse it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#if DEBUG
#include 
#define REACH std::cout &amp;lt;&amp;lt;  __PRETTY_FUNCTION__ &amp;lt;&amp;lt; &amp;quot; at line &amp;quot; &amp;lt;&amp;lt;  __LINE__ &amp;lt;&amp;lt; std::endl;
#endif

void foobar() {
    REACH
    // ... do foobar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And happy debugging!&lt;/p&gt;

&lt;p&gt;Not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to set a X window visible or invisible using Xlib</title>
      <link>http://dakerfp.github.io/post/how-to-set-x-window-visible-or-invisible/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/how-to-set-x-window-visible-or-invisible/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool m_visible;
Display* m_display;
Window m_window;

void setVisible(bool visible)
{
    if (visible == m_visible)
        return;

    if (visible)
        XMapWindow(m_display, m_window);
    else
        XUnmapWindow(m_display, m_window);

    m_visible = visible;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functional Pattern Matching with Python</title>
      <link>http://dakerfp.github.io/post/functional-pattern-matching-with-python/</link>
      <pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/functional-pattern-matching-with-python/</guid>
      <description>&lt;p&gt;This talk as given at Python Brasil 2013, at Brasília.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Ivn9fHPiXO31Kc&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/dakerfp/functional-pattern-matching&#34; title=&#34;Functional Pattern Matching on Python&#34; target=&#34;_blank&#34;&gt;Functional Pattern Matching on Python&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/dakerfp&#34; target=&#34;_blank&#34;&gt;Daker Fernandes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yet another day at INDT</title>
      <link>http://dakerfp.github.io/post/yet-another-day-at-indt/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/yet-another-day-at-indt/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/Z-QcJU5lyJw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Nix</title>
      <link>http://dakerfp.github.io/post/nix/</link>
      <pubDate>Tue, 11 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/nix/</guid>
      <description>

&lt;p&gt;For the last few months my team (OpenBossa) at INDT (Instituto Nokia de
Tecnologia) have been working on &lt;a href=&#34;http://nix.openbossa.org&#34;&gt;WebKitNix&lt;/a&gt;
(Nix for short). WebKitNix is a new WebKit2 port, fully based on POSIX
and OpenGL. We also use CMake build system (like GTK and Efl), GLib,
libsoup (networking) and Cairo (2D graphics) as dependencies. It also
uses Coordinated Graphics and Tiled Backing Store from WebKit2. Many of
its building blocks are shared with others ports already on trunk.&lt;/p&gt;

&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;The Nix port offers a C API for rendering a WebView within a OpenGL
context, based on WebKit2 API. You can use Nix to create applications
such as a web browser or a web runtime. WebKit2 run the context for each
web page in a different process. This process isolation keeps the UI
responsive, with smooth animations and scrolling, because it does not
get blocked by Javascript execution.&lt;/p&gt;

&lt;p&gt;We want to ease the work of Consumer Electronics developers who wants to
have a web runtime in their platform, without the need to create another
WebKit port. That is why Nix has less dependencies than Efl, GTK or Qt,
which should also be ported to the target platform.&lt;/p&gt;

&lt;p&gt;Nix API also enables the application to interact with the Javascript
context. So it is possible to add new APIs, to handle application
specific features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/nix.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-did-it-started&#34;&gt;How did it started?&lt;/h2&gt;

&lt;p&gt;The OpenBossa team used to maintain the Qt WebKit port for years,
helping Nokia/Trolltech. But then, in the last years, from the
experience gathered with the &lt;a href=&#34;http://snowshoe.openbossa.org/&#34;&gt;Snowshoe&lt;/a&gt;
browser, handling with dependencies (such as QtNetwork) that were much
bigger than we really needed. We tried to replace some dependencies of
QtWebKit and later Efl to see how minimal WebKit could be. So we took
some steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initial idea: platform/posix or platform/glib (share code)&lt;/li&gt;
&lt;li&gt;Ivolved problem: we wanted to have different behaviors for
QQuickWebView -&amp;gt; Qt Raw WebView&lt;/li&gt;
&lt;li&gt;Network: QtWebKit + Soup experiment&lt;/li&gt;
&lt;li&gt;Efl Raw WebView experiment&lt;/li&gt;
&lt;li&gt;Efl Without Efl :-)&lt;/li&gt;
&lt;li&gt;Nix&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-use-it&#34;&gt;How to use it?&lt;/h2&gt;

&lt;p&gt;When you compile &lt;a href=&#34;https://github.com/WebKitNix/webkitnix&#34;&gt;Nix source code&lt;/a&gt;
you can run the MiniBrowser to test it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ $WEBKITOUTPUTDIR/Release/bin/MiniBrowser http://maps.nokia.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/nix-map.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/WebKitNix/webkitnix/tree/master/Tools/MiniBrowser/nix&#34;&gt;MiniBrowser code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Nix-Demos repository offers some example code, including a Glut
based browser and minimal Python bindings for Nix:
&lt;a href=&#34;https://github.com/WebKitNix/nix-demos&#34;&gt;https://github.com/WebKitNix/nix-demos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On Nix-Demos we also have a Nix view, using only a DispmanX and OpenGL
ES 2 working on the Raspberry Pi. To compile this demo, you will need
our &lt;a href=&#34;https://github.com/WebKitNix/nix-rpi-sdk&#34;&gt;RaspberryPi SDK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/nix-rpi2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There is even a browser with its UI written in HTML:
&lt;a href=&#34;https://github.com/WebKitNix/drowser&#34;&gt;Drowser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to contact us on &lt;code&gt;#webkitnix&lt;/code&gt; at freenode.&lt;/p&gt;

&lt;h2 id=&#34;roadmap&#34;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;Our plan is to upstream Nix in WebKit trunk by June/2013. Then, keep the
maintainence and focus on the web platform, including some new HTML5
features, such as WebRTC.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The ePassport Standard and it&#39;s Cryptographic Scheme</title>
      <link>http://dakerfp.github.io/post/the-epassport-standard-and-its-cryptographic-scheme/</link>
      <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/the-epassport-standard-and-its-cryptographic-scheme/</guid>
      <description>&lt;p&gt;ePassport is the name given for the new passport specification
standardized by the &lt;a href=&#34;http://www.icao.int/&#34;&gt;International Civil Aviation Organization&lt;/a&gt; (ICAO).
It was created to speed up and standardize the immigration procedures.
This standard specifies &lt;a href=&#34;http://en.wikipedia.org/wiki/Radio-frequency_identification&#34;&gt;RFID&lt;/a&gt;
as the communication channel between the passport and the reader. The main
feature present on it is the insertion of biometric data into the
passport for biometric checks, including facial recognition, fingerprint
and iris information. To keep this important data protected, an
interesting cryptographic layer was added in addition to the usual
document falsification mechanisms such as watermarks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/passaporte-br.jpg&#34; alt=&#34;Brazilian ePassport. One of few which has full compatibility with the ICAO specification.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The name, nationality, birth date and other personal information as well
as the biometric informations are held on a contactless chip inside the
passport. This set of information are securely handled and is called the
&lt;strong&gt;Machine Readable Zone&lt;/strong&gt; (MRZ) and the chip asserts their security.
These informations are transmitted to a ePassport reader at immigration
process. As the embedded chip has low processing power, the biometric
data is transmitted to a reader so it can be checked against the porter
of the passport.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/epass.jpg&#34; alt=&#34;Anatomy of an ePassport&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As the physical communication layer of the ePassport broadcasts the
messages, even with the low range (less than a meter) RFID
communication. But as we know an eavesdropper can be very determined to
listen the communication ;-). I also has an electromagnetic shield on
the passport cover, however it doesn&amp;rsquo;t assure to block the communication
between the chip and the outside world when it&amp;rsquo;s closed, however it&amp;rsquo;s an
extra obstacle. Another issue to prevent is the passport and digital
data forgery. Otherwise a falsary could get someone else passport and
insert it&amp;rsquo;s biometrics information and easily bypass the immigration. As
we may see, the ePassport is a complete meal for cryptography
specialists.&lt;/p&gt;

&lt;p&gt;Starring at this cryptographic layer we have: &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;unique id&lt;/strong&gt; used as a private key. This key is hardcoded in the chip
manufacturing process and it&amp;rsquo;s non traceable. Doing
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Reverse_engineering#Reverse_engineering_of_integrated_circuits/smart_cards&#34;&gt;reverse engineering&lt;/a&gt;
on this kind of chip it&amp;rsquo;s really difficult because the equipment to do
it is extremely expensive and hard to obtain, it is only available to
large chip manufacturers.&lt;/p&gt;

&lt;p&gt;An access control to prevent an attacker to force the ePassport to send
information in the MRZ to readers unless the passport owner authorizes
it. Otherwise an attacker could use a reader and simply request the
biometric information to the passport. It uses a protocol called &lt;strong&gt;Basic
Access Control (BAC)&lt;/strong&gt; to give access for the reader. It consists on a
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Optical_character_recognition&#34;&gt;OCR&lt;/a&gt;
readable code inside the passport. With this code, the reader can say to
the passport it is an authorized reader, and then transmit data to it.
The BAC code is also used as key for the encrypted transmission of the
data, making an eavesdropping attack more difficult. It&amp;rsquo;s important to
note that the BAC security entirely relies on the physical access to the
passport. The BAC is inside the ICAO standard but doesn&amp;rsquo;t obligates it&amp;rsquo;s
support.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/bac.png&#34; alt=&#34;BAC happy path&#39;s sequence diagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The ICAO also standardizes a authentication for readers called
&lt;strong&gt;Extended Access Control (EAC)&lt;/strong&gt;. It consists of sets of signatures of
terminals stored in the passport&amp;rsquo;s chip. These signatures are changed
periodically by the countries (which signs them) on the terminals to
avoid keys stolen from equipments being used for much time. Some MRZ
sensitive data, such as iris and fingerprint, are just transmitted to
readers if it is EAC authenticated. Other informations are optional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/eac.png&#34; alt=&#34;EAC happy path&#39;s sequence diagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Passive Authentication (PA)&lt;/strong&gt; is a cryptographic mechanism  to
ensure the data in the passport is valid by the authority emitting the
passports. The PA is a kind of digital signature where the country who
emits passports ensures the veracity of the data with a asymmetric
Country Verification Certificate Authority (CVCA), a kind of
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Message_authentication_code&#34;&gt;message authentication code&lt;/a&gt;
(MAC). This process is known as
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Asymmetric_cryptography&#34;&gt;asymmetric cryptographic&lt;/a&gt;
hashing or &lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Digital_signature&#34;&gt;digital signing&lt;/a&gt;.
The PA MAC is created by the country when emits a passport, which must
keep a signing key safe, which is used to create the MAC code. Then it
publish the public key (all readers must know the countries public keys)
which can be used to check if the MAC is valid and it was really
generated by the organization which possess the signing key. The PA
scheme relies on mathematical functions which are easy to encrypt a MAC
with the private key, but computationally hard without them. The public
key can easily check if the MAC was generated by the ones who posses the
private key, and detect forged data. This process makes the forgery of
digital data a really hard computational problem, and ensures with
negligible chance of failure that the data is valid. All the MRZ data is
signed using such process. Using PA is mandatory by ICAO standards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/pa.png&#34; alt=&#34;PA happy path&#39;s sequence diagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Active Authentication (AA)&lt;/strong&gt; is a kind of
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Challenge-response_authentication&#34;&gt;challenge response authentication&lt;/a&gt;
mechanism to prevent the cloning of passports. It relies on the
untraceable chip key. Cloning the MRZ data is a simple task to be done,
however you can&amp;rsquo;t get a passport private key due to the difficulty of
doing reverse engineering to obtain it. The AA works as a challenge to
the passport, so you can verify if it really is. The reader encrypts a
random message that only him knows it&amp;rsquo;s content with the passport&amp;rsquo;s
public key. The message is then sent to the passport and it must decrypt
and response to the reader what was the original message. This process
works because of the duality principle of asymmetric cryptography. This
concept of challenge is the same concept behind
&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/CAPTCHA&#34;&gt;CAPTCHAs&lt;/a&gt; and
the &lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Turing_test&#34;&gt;Turing Test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/aa.png&#34; alt=&#34;AA hapy path&#39;s sequence diagram&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why is Python slow? Python Nordeste 2013</title>
      <link>http://dakerfp.github.io/post/why-is-python-slow-python-nordeste-2013/</link>
      <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/why-is-python-slow-python-nordeste-2013/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2fMR2uzmpqvax7&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/dakerfp/pyne-whypythonisslow&#34; title=&#34;Why is Python slow? Python Nordeste 2013&#34; target=&#34;_blank&#34;&gt;Why is Python slow? Python Nordeste 2013&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/dakerfp&#34; target=&#34;_blank&#34;&gt;Daker Fernandes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;It was a great event! Thanks to everyone who made it happen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL Lesson 02 - Drawing with OpenGL</title>
      <link>http://dakerfp.github.io/post/opengl-lesson-02-drawing-with-opengl/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://dakerfp.github.io/post/opengl-lesson-02-drawing-with-opengl/</guid>
      <description>

&lt;p&gt;OpenGL is a primarily an C API, for drawing graphics. Implementations
and bindings exists for several languages such as Java, Python, Ruby and
Objective C. OpenGL became the standard drawing API supported by most
modern device with graphics, independent from vendor, operational
system, or if it is desktop or embedded. Of course the platform matters,
but we can split the platform dependent code from pure OpenGL.&lt;/p&gt;

&lt;p&gt;OpenGL became a standard mainly due to its rendering pipeline, which is
trivially parallelized. This allowed the creation of specialized
hardware, the well known graphics cards. These cards became very small
and started to be practical shipping embedded devices with them. Now
high performance graphics in these devices are a reality.&lt;/p&gt;

&lt;p&gt;On traditional desktop platforms, the usual layout of graphics card
stand as pictured below. In this scenario, moving data to and from the
card can mean a huge cost. On others platforms, such as the mobile, its
common that GPUs uses the same memory as the CPU. However, the
programmer still needs to handle this memory efficiently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/arch.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For this new range of devices, the Khronos (group responsible for
standardizing OpenGL API) released an OpengGL specification focused on
embedded systems, the OpenGL ES.&lt;/p&gt;

&lt;p&gt;In this post I would like to explain some key concepts about the OpenGL
API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the best practices for it.&lt;/li&gt;
&lt;li&gt;Differences between the &amp;ldquo;Desktop&amp;rdquo; version versus the ES version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want not to go deep in the API or its functionalities. You have other
sources that covers them better. I recommend the ones used as reference
for this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.glprogramming.com/red/index.html&#34;&gt;GL Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.songho.ca/opengl/&#34;&gt;Song Ho Ahn&amp;rsquo;s Tutorials and Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenGL Programming Guide, 7th edition. (a.k.a. The Red Book) or a newer edition&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hello-triangle&#34;&gt;Hello Triangle!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/hello.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enough talking, show me the code! I wrote the following code using GLUT
and OpenGL 1. GLUT is a simple toolkit to create simple OpenGL
applications. It basically opens an window with a GL context, and
handles primitive mouse and keyboard events.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;
#include &amp;lt;GL/gl.h&amp;gt;
#include &amp;lt;GL/glut.h&amp;gt;

void display()
{
    glClear(GL_COLOR_BUFFER_BIT); // Clean up the canvas

    glBegin(GL_TRIANGLES);
    glVertex2f(-1.0f, -1.0f);
    glVertex2f( 0.0f,  1.0f);
    glVertex2f( 1.0f, -1.0f);
    glEnd();

    glFlush(); // Forces previous GL commands to be send to the GPU
}

int main(int argc, char **argv)
{
    glutInit(&amp;amp;argc, argv);
    glutInitWindowSize(480, 480);
    glutCreateWindow(&amp;quot;Hello World&amp;quot;);

    glutDisplayFunc(display);

    glutMainLoop();

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drawing-the-triagle&#34;&gt;Drawing the triagle&lt;/h2&gt;

&lt;p&gt;In OpenGL 1 and 2, the easiest way for you to draw a triangle, is using
some form of &lt;code&gt;glVertex*&lt;/code&gt;. These call must be enclosed between &lt;code&gt;glBegin&lt;/code&gt;
and &lt;code&gt;glEnd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OpengGL uses a coordinate system where the origin is the center of the
viewport, the X axis has left to right orientation and Y axis is bottom
to top, as pictured below. By default everything between (-1, -1) and
(1, 1) is what youll be shown in the viewport. Check this
&lt;a href=&#34;http://www.songho.ca/opengl/gl_transform.html&#34;&gt;tutorial&lt;/a&gt; for
understanding OpengGL coordinate system and camera deeper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/gles-cam.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You also need to assert what kind of primitive you are passing to
OpenGL. It accepts the primitives illustrated below with their
correspondent constants. OpenGL ES does not support polygon or quads,
you will need to assemble them yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/primitives.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Interleaved with the vertex position, you can add other information such
as colors, texture coordinates, normal direction. You can define other
vertex attributes for richer shaders. Shader is a piece of code that
defines how your primitives will be rendered. With them is possible to
make a lot of effects such as normal mapping, adding shadows, particles
and many more. When we choose a shading model we are using OpengGL
default shaders. Standard OpengGL defines a large set of inputs and
outputs a shader must have. OpenGL ES 2 and above does not defines what
you must enter as input for the shaders. Is up to the programmer what
will be the inputs vertex shader will have. The contract assumes that
the vertex shader will return at least a position (search for
gl_Position) and the fragment shader a color (gl_FragColor). Do not
worry. This will be further detailed in a following post.&lt;/p&gt;

&lt;h2 id=&#34;vertex-arrays&#34;&gt;Vertex Arrays&lt;/h2&gt;

&lt;p&gt;Drawing with &lt;code&gt;glVertex*&lt;/code&gt; was deprecated from OpenGL 3 and beyond. In
OpenGL ES we do not have them either. This drawing method overheads of
one function call for each information entered in the pipeline. The
OpengGL comittee also wanted to disencourage the usage of this kind of
input mode. The interfere of this overhead is small for small objects,
but is not true for large ones. Another reason, for removing them
(specially on ES version), was the make OpenGL implementation lighter,
by reducing the number of internal states.&lt;/p&gt;

&lt;p&gt;Prefere to draw using vertex arrays. Vertex arrays are arrays that each
element contains all the vertex information. The command to draw them is
&lt;code&gt;glDrawArrays&lt;/code&gt;. Indexes can be specified to reuse the vertex
definition by using &lt;code&gt;glDrawElements&lt;/code&gt;. A good reference for this subject
is &lt;a href=&#34;http://www.songho.ca/opengl/gl_vertexarray.html&#34;&gt;this one&lt;/a&gt;. As this
is the standard way when using OpenGL ES 2, I will give an example.&lt;/p&gt;

&lt;h2 id=&#34;example-of-vertex-arrays&#34;&gt;Example of Vertex Arrays&lt;/h2&gt;

&lt;p&gt;To draw a square you must first define the schema of each vertex. Here,
each vertex has a position (3 floats) and a color (3 floats for R, G and
B color channels). In C I like to define a struct to improve
readability:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct vertex_t {
    GLfloat position[3];
    GLfloat color[3];
};

void display()
{
    struct vertex_t vertex_data[] = {
         {{-1.0f, -1.0f, 0.0f}, {1.0f, 0.0f, 0.0f}}, // red bottom left
         {{-1.0f,  1.0f, 0.0f}, {0.0f, 1.0f, 0.0f}}, // green top left 
         {{ 1.0f, -1.0f, 0.0f}, {0.0f, 0.0f, 1.0f}}, // blue bottom right
         {{ 1.0f,  1.0f, 0.0f}, {1.0f, 1.0f, 1.0f}}, // white top right
    };
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to have different arrays for color and position, but for
speeding up the shader execution is recommended to keep information
about the same vertex contiguous to use memory locality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;glVertexAttribPointer(
    position_attribute_location, // attribute description (depends on the shader)
    3, // size of the information (3 coordinates in this case)
    GL_FLOAT, // type of the information
    GL_FALSE, // if the value will be normalized (for vectors)
    sizeof(struct vertex_t), // stride of the memory vector
    &amp;amp;vertex_data[0].position // initial address
);
// asserting that position will be used by the shader
glEnableVertexAttribArray(position_attribute_location); 

glVertexAttribPointer(
    color_attribute_location,
    3,
    GL_FLOAT,
    GL_FALSE,
    sizeof(struct vertex_t),
    &amp;amp;vertex_data[0].color
);
// asserting that color will be used by the shader
glEnableVertexAttribArray(color_attribute_location);

// Draw a triangle strip vertex from the current attribute pointers
// starting on index 0 and using 4 elements
glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the following result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dakerfp.github.io/img/hello2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the colors for each vertex stands as the ones we gave, but
all the region in between has the color calculated as the interpolation
of the vertex colors. The rasterizer is the responsible for doing this.&lt;/p&gt;

&lt;p&gt;You could also use indexes to access the vertex. For bigger elements it
may be a better solution, specially for 3D objects, because you can
share vertex that appears in multiple polygons of an object. Using index
would speed up the memory transfer and usage for these objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;GLubyte indices[] = {
    0, 1, 2, // first triangle
    1, 2, 3  // second triangle
};

glDrawElements(
    GL_TRIANGLES, // not a strip in this case
    6, // number of indexes
    GL_UNSIGNED_BYTE, // type of the indexes
    indices // a pointer to indexes themselves
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous code does it for a trivial shader set (called a program). I
will not explain how to use it here because is out of the scope for this
lesson. On regular OpenGL versions you could use &lt;code&gt;glVertexPointer&lt;/code&gt; and
&lt;code&gt;glColorPointer&lt;/code&gt;. I will left it as an exercise for you.&lt;/p&gt;

&lt;h2 id=&#34;vertex-buffer-objects&#34;&gt;Vertex Buffer Objects&lt;/h2&gt;

&lt;p&gt;Buffers are objects that stores vertex information in GPU memory. It is
a must for improving the performance when drawing large objects. In
heavy application such as games or CADs, is good to remove the overhead
of from sending vertex data from regular memory to graphics card memory
by pre loading the vertex data in a buffer. The code below show how can
you upload the vertex data to a buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;GLuint bufferId;

// here you get handlers for GPU buffers, in this case, only one
glGenBuffers(1, &amp;amp;bufferId);

// asserts that you are using the buffer represented by bufferId
// as the current ARRAY_BUFFER
glBindBuffer(GL_ARRAY_BUFFER, bufferId);

glBufferData(
    GL_ARRAY_BUFFER, // the data is uploaded to current array buffer
    sizeof(vertex_data), // number of bytes of the total array
    vertex_data, // the pointer to the data
    GL_STATIC_DRAW, // hint of how the buffer will be used, in this case, data will not change
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To draw the buffer content, you must use &lt;code&gt;glVertexAttribPointer&lt;/code&gt; passing
the buffer offset instead of the &lt;code&gt;vertex_data&lt;/code&gt; address. OpenGL will
notice that a buffer is bound and will use it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;glBindBuffer(GL_ARRAY_BUFFER, bufferId); // Bind whenever you will use it

glVertexAttribPointer(
    position_attribute_location, // attribute description (depends on the shader)
    3, // size of the information (3 coordinates in this case)
    GL_FLOAT, // type of the information
    GL_FALSE, // if the value will be normalized (for vectors)
    sizeof(struct vertex_t), // stride of the vertex buffer data
    0 // offset at buffer
);
// asserting that position will be used by the shader
glEnableVertexAttribArray(position_attribute_location); 

glVertexAttribPointer(
    color_attribute_location,
    3,
    GL_FLOAT,
    GL_FALSE,
    sizeof(struct vertex_t),
    3 // offset at buffer
);
// asserting that color will be used by the shader
glEnableVertexAttribArray(color_attribute_location);

// Draw a triangle strip vertex from the current attribute pointers
// starting on index 0 and using 4 elements
glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

// Unbinds the buffer
glBindBuffer(GL_ARRAY_BUFFER, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remarks-about-openggl-es-2&#34;&gt;Remarks about OpengGL ES 2&lt;/h2&gt;

&lt;p&gt;OpenGL ES 2 does not have the model-view matrix, responsible for setting
the camera view, nor the matrix stack. All you have is the X axis [-1.0,
-1.0] to Y axis [1.0, 1.0] region which will be mapped to the viewport.
If you need those features (you will for most 3d applications) you will
have to handle them inside your application code. You will have to do it
yourself by exporting a model-view in the vertex shader as an uniform
variable. For a theorical background on it, check my &lt;a href=&#34;http://codecereal.blogspot.com.br/2012/11/opengl-lesson-01-pre-opengl.html&#34;&gt;previous
lesson&lt;/a&gt;.
A great tutorial on how to play with the camera, transformations and
model coordinates is
&lt;a href=&#34;http://www.songho.ca/opengl/gl_transform.html&#34;&gt;this&lt;/a&gt;. It explains a bit
how it works under the hood for regular OpenGL. Its worthy to take a
look.&lt;/p&gt;

&lt;p&gt;While hacking some examples I have come to some weird behaviour in
OpenGL ES 2.0 for the Raspberry Pi. It might be bugs or mine
misinterpretation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glUniformMatrix4fv&lt;/code&gt; translate parameter &lt;em&gt;must&lt;/em&gt; be false. It simply
does not work otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glDrawElements&lt;/code&gt; did not worked with unsigned int.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>